{"version":3,"sources":["Toolbar.jsx","Sidebar.jsx","Gate.jsx","GateMenu.jsx","Qubit.jsx","Circuit.jsx","Measure.jsx","App.jsx","index.js"],"names":["Toolbar","style","display","height","className","position","left","top","fontSize","right","ticking","format","timezone","Component","Sidebar","onChange","e","props","onSetOption","checked","this","options","showGateDrop","offColor","showGateMatrix","showStatevector","value","randomSeed","href","target","rel","Gate","type","ref","innerRef","icon","faTachometerAlt","onDelete","onDoubleClick","qubit","index","math","onClick","onSelectTrigger","GateMenu","droppableId","uuid","direction","provided","snapshot","droppableProps","draggableId","draggableProps","dragHandleProps","Qubit","number","marginLeft","marginRight","gates","map","gate","onDeleteGate","key","Circuit","circuit","onAddQubit","onRemoveQubit","onResetCircuit","Measure","state","stateVector","a","b","j","N","length","k","Math","pow","l","index0","index1","change","redistribute","tmpStateVector","phaseTransitionT","phaseTransitionS","phaseTransitionZ","swap","m","n","u","min","v","max","x","y","z","console","log","push","i","evalHGate","evalTGate","evalSGate","evalZGate","evalXGate","evalYGate","evalCNOTGate","evalSWAPGate","setState","evaluateCircuit","prevProps","prevState","qubits","states","toString","padStart","split","join","undefined","probabilities","outcomes","probability","re","im","probabilityCount","seed","seedrandom","output","floor","qubitOutput","charAt","defaultCircuit","App","JSON","parse","stringify","result","destination","tmpCircuit","parseInt","col","substring","option","gateIndex","pop","bind","onDragEnd","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d449965e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\nimport Clock from \"react-live-clock\";\n\n// Top toolbar\nclass Toolbar extends Component {\n  render() {\n    return (\n      <div style={{ display: \"fixed\", height: \"50px\" }}>\n        <div className=\"toolbar\">\n          <div\n            style={{\n              position: \"absolute\",\n              left: \"25px\",\n              top: \"0\",\n              fontSize: \"0.8em\",\n            }}\n          >\n            Version 1.4.7\n          </div>\n          Spring 2021 IQC Quantum Computer Simulator\n          <div style={{ position: \"absolute\", right: \"40px\", top: \"0\" }}>\n            <Clock ticking format={\"HH:mm:ss\"} timezone={\"Etc/UTC\"} />\n          </div>\n          <div style={{ position: \"absolute\", right: \"25px\", top: \"0\" }}>Z</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport Switch from \"react-switch\";\n\n// Sidebar with instructions and options\nclass Sidebar extends Component {\n  render() {\n    return (\n      <div className=\"sidebar\">\n        <h1>Instructions:</h1>\n        <hr />\n        Drag and drop gates on qubit register lines to form a circuit.\n        <br />\n        <br />\n        To connect CNOT trigger lines, click on one of the connection points\n        that appear after adding a CNOT gate.\n        <br />\n        <br />\n        To delete a gate, double click on it.\n        <h1>Options:</h1>\n        <hr />\n        <br />\n        <span>Display Gate Drop Locations:</span>\n        <Switch\n          onChange={(e) => this.props.onSetOption(\"showGateDrop\", e)}\n          checked={this.props.options.showGateDrop}\n          offColor=\"#b02e2e\"\n          className=\"react-switch\"\n        />\n        <br />\n        <br />\n        <span>Display Gate Matrices:</span>\n        <Switch\n          onChange={(e) => this.props.onSetOption(\"showGateMatrix\", e)}\n          checked={this.props.options.showGateMatrix}\n          offColor=\"#b02e2e\"\n          className=\"react-switch\"\n        />\n        <br />\n        <br />\n        <span>Display Statevector:</span>\n        <Switch\n          onChange={(e) => this.props.onSetOption(\"showStatevector\", e)}\n          checked={this.props.options.showStatevector}\n          offColor=\"#b02e2e\"\n          className=\"react-switch\"\n        />\n        <br />\n        <br />\n        <span>Random seed:</span>\n        <input\n          className=\"input\"\n          value={this.props.options.randomSeed}\n          onChange={(e) => this.props.onSetOption(\"setSeed\", e)}\n        ></input>\n        <h1>Source Code:</h1>\n        <hr />\n        <br />\n        Source code is available on{\" \"}\n        <a\n          href=\"https://github.com/nrankin18/quantum\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          GitHub\n        </a>\n        <br />\n        <br />\n        Please submit bug reports to{\" \"}\n        <a\n          href=\"https://github.com/nrankin18/quantum/issues\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          GitHub\n        </a>\n        <br />\n        <div className=\"copyright\">Copyright © 2021 Nathan Rankin</div>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport { BlockMath } from \"react-katex\";\nimport \"katex/dist/katex.min.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTachometerAlt } from \"@fortawesome/free-solid-svg-icons\";\n\n// This is the gate component that is rendered on a qubit line\nclass Gate extends Component {\n  render() {\n    switch (this.props.type) {\n      case \"measure\":\n        return (\n          <div\n            className={\"gate measure\"}\n            {...this.props}\n            ref={this.props.innerRef}\n          >\n            <FontAwesomeIcon icon={faTachometerAlt} />\n          </div>\n        );\n      case \"cnot\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate cnot noselect deletable\"\n                : \"gate cnot noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            CNOT\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\begin{bmatrix}1&0&0&0\\\\ 0&1&0&0\\\\ 0&0&0&1\\\\ 0&0&1&0\\end{bmatrix}\" />\n            </span>\n          </div>\n        );\n      case \"swap\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate swap noselect deletable\"\n                : \"gate swap noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            SWAP\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\begin{bmatrix}1&0&0&0\\\\ 0&0&1&0\\\\ 0&1&0&0\\\\ 0&0&0&1\\end{bmatrix}\" />\n            </span>\n          </div>\n        );\n      case \"cnot-up\":\n      case \"cnot-down\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate cnot x noselect deletable\"\n                : \"gate cnot x noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            X\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\begin{bmatrix}0&1\\\\ 1&0\\end{bmatrix}\" />\n            </span>\n            <span className={this.props.type} />\n          </div>\n        );\n      case \"swap-up\":\n      case \"swap-down\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate swap x noselect deletable\"\n                : \"gate swap x noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            X\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\begin{bmatrix}0&1\\\\ 1&0\\end{bmatrix}\" />\n            </span>\n            <span className={this.props.type} />\n          </div>\n        );\n      case \"h\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate h noselect deletable\"\n                : \"gate h noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            H\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\frac1{\\sqrt2}\\begin{bmatrix}1&1\\\\ 1&-1\\end{bmatrix}\" />\n            </span>\n          </div>\n        );\n      case \"t\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate t noselect deletable\"\n                : \"gate t noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            T\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\begin{bmatrix}1&0\\\\ 0&e^{i\\pi /4}\\end{bmatrix}\" />\n            </span>\n          </div>\n        );\n      case \"s\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate s noselect deletable\"\n                : \"gate s noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            S\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\begin{bmatrix}1&0\\\\ 0&i\\end{bmatrix}\" />\n            </span>\n          </div>\n        );\n      case \"z\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate z noselect deletable\"\n                : \"gate z noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            Z\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\begin{bmatrix}1&0\\\\ 0&-1\\end{bmatrix}\" />\n            </span>\n          </div>\n        );\n      case \"x\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate x noselect deletable\"\n                : \"gate x noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            X\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\begin{bmatrix}0&1\\\\ 1&0\\end{bmatrix}\" />\n            </span>\n          </div>\n        );\n      case \"y\":\n        return (\n          <div\n            className={\n              this.props.onDelete\n                ? \"gate y noselect deletable\"\n                : \"gate y noselect\"\n            }\n            {...this.props}\n            ref={this.props.innerRef}\n            onDoubleClick={(e) => {\n              if (this.props.onDelete)\n                this.props.onDelete(\n                  this.props.qubit,\n                  this.props.index,\n                  this.props.type\n                );\n            }}\n          >\n            Y\n            <span\n              className={\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\n              }\n            >\n              <BlockMath math=\"\\begin{bmatrix}0&-i\\\\ i&0\\end{bmatrix}\" />\n            </span>\n          </div>\n        );\n      case \"trigopt-cnot\":\n        return (\n          <div\n            className=\"gate trigopt noselect\"\n            {...this.props}\n            ref={this.props.innerRef}\n          >\n            <div\n              onClick={(e) =>\n                this.props.onSelectTrigger(\n                  this.props.qubit,\n                  this.props.index,\n                  \"cnot\"\n                )\n              }\n            />\n          </div>\n        );\n      case \"trigopt-swap\":\n        return (\n          <div\n            className=\"gate trigopt noselect\"\n            {...this.props}\n            ref={this.props.innerRef}\n          >\n            <div\n              onClick={(e) =>\n                this.props.onSelectTrigger(\n                  this.props.qubit,\n                  this.props.index,\n                  \"swap\"\n                )\n              }\n            />\n          </div>\n        );\n      case \"trig\":\n        return (\n          <div\n            className=\"gate trig noselect\"\n            {...this.props}\n            ref={this.props.innerRef}\n          >\n            <div />\n          </div>\n        );\n      case \"connect\":\n        return (\n          <div\n            className=\"gate connect noselect\"\n            {...this.props}\n            ref={this.props.innerRef}\n          >\n            <div />\n          </div>\n        );\n      default:\n        return null;\n    }\n  }\n}\n\nexport default Gate;\n","import React, { Component } from \"react\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuid } from \"uuid\";\nimport \"./style.css\";\nimport Gate from \"./Gate\";\n\n// This component is the menu to drag new gates from\nclass GateMenu extends Component {\n  render() {\n    return (\n      <div className=\"gate-menu\">\n        <Droppable droppableId={uuid()} key={uuid()} direction=\"horizontal\">\n          {(provided, snapshot) => {\n            return (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                <span className=\"gate-wrapper\">\n                  <Draggable key={1} draggableId={\"h\"} index={0}>\n                    {(provided) => {\n                      return (\n                        <Gate\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          innerRef={provided.innerRef}\n                          type=\"h\"\n                          options={this.props.options}\n                        />\n                      );\n                    }}\n                  </Draggable>\n                </span>\n                <span className=\"gate-wrapper\">\n                  <Draggable key={2} draggableId={\"x\"} index={0}>\n                    {(provided) => {\n                      return (\n                        <Gate\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          innerRef={provided.innerRef}\n                          type=\"x\"\n                          options={this.props.options}\n                        />\n                      );\n                    }}\n                  </Draggable>\n                </span>\n                <span className=\"gate-wrapper\">\n                  <Draggable key={3} draggableId={\"cnot\"} index={0}>\n                    {(provided) => {\n                      return (\n                        <Gate\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          innerRef={provided.innerRef}\n                          type=\"cnot\"\n                          options={this.props.options}\n                        />\n                      );\n                    }}\n                  </Draggable>\n                </span>\n                <span className=\"gate-wrapper\">\n                  <Draggable key={8} draggableId={\"swap\"} index={0}>\n                    {(provided) => {\n                      return (\n                        <Gate\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          innerRef={provided.innerRef}\n                          type=\"swap\"\n                          options={this.props.options}\n                        />\n                      );\n                    }}\n                  </Draggable>\n                </span>\n                <span className=\"gate-wrapper\">\n                  <Draggable key={4} draggableId={\"y\"} index={0}>\n                    {(provided) => {\n                      return (\n                        <Gate\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          innerRef={provided.innerRef}\n                          type=\"y\"\n                          options={this.props.options}\n                        />\n                      );\n                    }}\n                  </Draggable>\n                </span>\n                <span className=\"gate-wrapper\">\n                  <Draggable key={5} draggableId={\"z\"} index={0}>\n                    {(provided) => {\n                      return (\n                        <Gate\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          innerRef={provided.innerRef}\n                          type=\"z\"\n                          options={this.props.options}\n                        />\n                      );\n                    }}\n                  </Draggable>\n                </span>\n                <span className=\"gate-wrapper\">\n                  <Draggable key={6} draggableId={\"t\"} index={0}>\n                    {(provided) => {\n                      return (\n                        <Gate\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          innerRef={provided.innerRef}\n                          type=\"t\"\n                          options={this.props.options}\n                        />\n                      );\n                    }}\n                  </Draggable>\n                </span>\n                <span className=\"gate-wrapper\">\n                  <Draggable key={7} draggableId={\"s\"} index={0}>\n                    {(provided) => {\n                      return (\n                        <Gate\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          innerRef={provided.innerRef}\n                          type=\"s\"\n                          options={this.props.options}\n                        />\n                      );\n                    }}\n                  </Draggable>\n                </span>\n              </div>\n            );\n          }}\n        </Droppable>\n      </div>\n    );\n  }\n}\n\nexport default GateMenu;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Gate from \"./Gate\";\nimport { v4 as uuid } from \"uuid\";\n\n// This component is an individual qubit register\nclass Qubit extends Component {\n  render() {\n    return (\n      <div className=\"qubit\">\n        <span className=\"qubit-line\"></span>\n        <span>\n          <strong>\n            q<sub>{this.props.number}</sub>\n          </strong>\n        </span>\n        <span style={{ marginLeft: \"10px\", marginRight: \"20px\" }}>|0⟩</span>\n        {this.props.gates.map((gate, index) => {\n          if (\n            gate === \"h\" ||\n            gate === \"cnot\" ||\n            gate === \"cnot-up\" ||\n            gate === \"cnot-down\" ||\n            gate === \"swap\" ||\n            gate === \"swap-up\" ||\n            gate === \"swap-down\" ||\n            gate === \"t\" ||\n            gate === \"s\" ||\n            gate === \"z\" ||\n            gate === \"x\" ||\n            gate === \"y\" ||\n            gate === \"trig\" ||\n            gate === \"connect\"\n          ) {\n            return (\n              <span className=\"gate-wrapper\" key={uuid()}>\n                <Gate\n                  type={gate}\n                  qubit={this.props.number}\n                  index={index}\n                  options={this.props.options}\n                  onDelete={this.props.onDeleteGate}\n                />\n              </span>\n            );\n          } else if (gate === \"measure\") {\n            return (\n              <span className=\"gate-wrapper\" key={uuid()}>\n                <Gate\n                  type=\"measure\"\n                  qubit={this.props.number}\n                  index={index}\n                  options={this.props.options}\n                />\n              </span>\n            );\n          } else if (gate === \"trigopt-cnot\" || gate === \"trigopt-swap\") {\n            return (\n              <span className=\"gate-wrapper\" key={uuid()}>\n                <Gate\n                  type={gate}\n                  qubit={this.props.number}\n                  index={index}\n                  options={this.props.options}\n                  onSelectTrigger={this.props.onSelectTrigger}\n                />\n              </span>\n            );\n          } else {\n            return (\n              <span className=\"gate-wrapper\" key={uuid()}>\n                <Droppable\n                  droppableId={\"q\" + this.props.number + \",\" + index}\n                  direction=\"horizontal\"\n                >\n                  {(provided) => {\n                    return (\n                      <span\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        key={uuid()}\n                        className={\n                          this.props.options.showGateDrop\n                            ? \"gate-drop show\"\n                            : \"gate-drop\"\n                        }\n                      />\n                    );\n                  }}\n                </Droppable>\n              </span>\n            );\n          }\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Qubit;\n","import React, { Component } from \"react\";\nimport Qubit from \"./Qubit\";\nimport \"./style.css\";\n\n// This componenet manages the variable qubit lines\nclass Circuit extends Component {\n  render() {\n    return (\n      <>\n        <div className=\"circuit-wrapper\">\n          <div className=\"circuit\">\n            {this.props.circuit.map((qubit, index) => (\n              <Qubit\n                number={index}\n                options={this.props.options}\n                key={index}\n                gates={qubit}\n                onSelectTrigger={this.props.onSelectTrigger}\n                onDeleteGate={this.props.onDeleteGate}\n              />\n            ))}\n          </div>\n        </div>\n        <button className=\"button\" onClick={() => this.props.onAddQubit()}>\n          Add qubit\n        </button>\n        <button className=\"button\" onClick={() => this.props.onRemoveQubit()}>\n          Remove qubit\n        </button>\n        <button className=\"button\" onClick={() => this.props.onResetCircuit()}>\n          Reset circuit\n        </button>{\" \"}\n      </>\n    );\n  }\n}\n\nexport default Circuit;\n","import React, { Component } from \"react\";\nimport * as math from \"mathjs\";\nimport \"./style.css\";\nimport seedrandom from \"seedrandom\";\n\n// This component calculates and displays the output of the circuit\nclass Measure extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stateVector: [],\n    };\n  }\n\n  // a = 1/sqrt(2)*(a+b)\n  // b = 1/sqrt(2)*(a-b)\n  redistribute(a, b) {\n    return {\n      a: math.evaluate(\"1/sqrt(2)*((\" + a + \")+(\" + b + \"))\"),\n      b: math.evaluate(\"1/sqrt(2)*((\" + a + \")-(\" + b + \"))\"),\n    };\n  }\n\n  // a = e^(i pi/4)*a\n  phaseTransitionT(a) {\n    return math.evaluate(\"e^((i*pi)/4)*(\" + a + \")\");\n  }\n\n  // a = i*a\n  phaseTransitionS(a) {\n    return math.evaluate(\"i*(\" + a + \")\");\n  }\n\n  // a = -1*a\n  phaseTransitionZ(a) {\n    return math.evaluate(\"-1*(\" + a + \")\");\n  }\n\n  // Swaps a and b\n  swap(a, b) {\n    return { a: b, b: a };\n  }\n\n  // Function called when H gate encountered\n  evalHGate(j, stateVector) {\n    const N = this.props.circuit.length;\n    for (var k = 0; k < Math.pow(2, j); k++) {\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\n        const index0 = l + k * Math.pow(2, N - j);\n        const index1 = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\n        const change = this.redistribute(\n          stateVector[index0],\n          stateVector[index1]\n        );\n        stateVector[index0] = change.a;\n        stateVector[index1] = change.b;\n      }\n    }\n    return stateVector;\n  }\n\n  // Function called when T gate encountered\n  evalTGate(j, tmpStateVector) {\n    const N = this.props.circuit.length;\n    for (var k = 0; k < Math.pow(2, j); k++) {\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\n        const index = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\n        const change = this.phaseTransitionT(tmpStateVector[index]);\n        tmpStateVector[index] = change;\n      }\n    }\n    return tmpStateVector;\n  }\n\n  // Function called when S gate encountered\n  evalSGate(j, tmpStateVector) {\n    const N = this.props.circuit.length;\n    for (var k = 0; k < Math.pow(2, j); k++) {\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\n        const index = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\n        const change = this.phaseTransitionS(tmpStateVector[index]);\n        tmpStateVector[index] = change;\n      }\n    }\n    return tmpStateVector;\n  }\n\n  // Function called when Z gate encountered\n  evalZGate(j, tmpStateVector) {\n    const N = this.props.circuit.length;\n    for (var k = 0; k < Math.pow(2, j); k++) {\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\n        const index = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\n        const change = this.phaseTransitionZ(tmpStateVector[index]);\n        tmpStateVector[index] = change;\n      }\n    }\n    return tmpStateVector;\n  }\n\n  // Function called when Y gate encountered\n  evalYGate(j, tmpStateVector) {\n    const N = this.props.circuit.length;\n    for (var k = 0; k < Math.pow(2, j); k++) {\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\n        const index0 = l + k * Math.pow(2, N - j);\n        const index1 = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\n        const change = this.swap(\n          tmpStateVector[index0],\n          tmpStateVector[index1]\n        );\n        tmpStateVector[index0] = math.evaluate(\"-i*(\" + change.a + \")\");\n        tmpStateVector[index1] = math.evaluate(\"i*(\" + change.b + \")\");\n      }\n    }\n    return tmpStateVector;\n  }\n\n  // Function called when X gate encountered\n  evalXGate(j, tmpStateVector) {\n    const N = this.props.circuit.length;\n    for (var k = 0; k < Math.pow(2, j); k++) {\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\n        const index0 = l + k * Math.pow(2, N - j);\n        const index1 = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\n        const change = this.swap(\n          tmpStateVector[index0],\n          tmpStateVector[index1]\n        );\n        tmpStateVector[index0] = change.a;\n        tmpStateVector[index1] = change.b;\n      }\n    }\n    return tmpStateVector;\n  }\n\n  // Function called when CNOT gate encountered\n  // m = trigger, n = NOT\n  evalCNOTGate(m, n, tmpStateVector) {\n    const N = this.props.circuit.length;\n    const u = Math.min(m, n);\n    const v = Math.max(m, n);\n    for (var x = 0; x < Math.pow(2, u); x++) {\n      for (var y = 0; y < Math.pow(2, v - u - 1); y++) {\n        for (var z = 0; z < Math.pow(2, N - v - 1); z++) {\n          const index0 =\n            x * Math.pow(2, N - u) +\n            y * Math.pow(2, N - v) +\n            z +\n            Math.pow(2, N - m - 1);\n          const index1 =\n            x * Math.pow(2, N - u) +\n            y * Math.pow(2, N - v) +\n            z +\n            Math.pow(2, N - m - 1) +\n            Math.pow(2, N - n - 1);\n          const change = this.swap(\n            tmpStateVector[index0],\n            tmpStateVector[index1]\n          );\n          tmpStateVector[index0] = change.a;\n          tmpStateVector[index1] = change.b;\n        }\n      }\n    }\n    return tmpStateVector;\n  }\n\n  // Function called when SWAP gate encountered\n  evalSWAPGate(m, n, tmpStateVector) {\n    const N = this.props.circuit.length;\n    const u = Math.min(m, n);\n    const v = Math.max(m, n);\n    for (var x = 0; x < Math.pow(2, u); x++) {\n      for (var y = 0; y < Math.pow(2, v - u - 1); y++) {\n        for (var z = 0; z < Math.pow(2, N - v - 1); z++) {\n          const index0 =\n            x * Math.pow(2, N - u) +\n            y * Math.pow(2, N - v) +\n            z +\n            Math.pow(2, N - m - 1);\n          const index1 =\n            x * Math.pow(2, N - u) +\n            y * Math.pow(2, N - v) +\n            z +\n            Math.pow(2, N - n - 1);\n          const change = this.swap(\n            tmpStateVector[index0],\n            tmpStateVector[index1]\n          );\n          tmpStateVector[index0] = change.a;\n          tmpStateVector[index1] = change.b;\n        }\n      }\n    }\n    return tmpStateVector;\n  }\n\n  // Called when circuit is updated to calculate new output (ignores unconnected CNOT gates)\n  evaluateCircuit() {\n    console.log(\"Calculating result of following circuit:\", this.props.circuit);\n\n    // Initialize state vector\n    const N = this.props.circuit.length;\n    var tmpStateVector = [];\n    tmpStateVector.push(1);\n    for (var i = 1; i < Math.pow(2, N); i++) {\n      tmpStateVector.push(0);\n    }\n\n    // Column-major traversal\n    // i = gate number, j = qubit number\n    for (i = 0; i < this.props.circuit[0].length; i++) {\n      var k;\n      for (var j = 0; j < this.props.circuit.length; j++) {\n        switch (this.props.circuit[j][i]) {\n          case \"h\":\n            tmpStateVector = this.evalHGate(j, tmpStateVector);\n            break;\n          case \"t\":\n            tmpStateVector = this.evalTGate(j, tmpStateVector);\n            break;\n          case \"s\":\n            tmpStateVector = this.evalSGate(j, tmpStateVector);\n            break;\n          case \"z\":\n            tmpStateVector = this.evalZGate(j, tmpStateVector);\n            break;\n          case \"x\":\n            tmpStateVector = this.evalXGate(j, tmpStateVector);\n            break;\n          case \"y\":\n            tmpStateVector = this.evalYGate(j, tmpStateVector);\n            break;\n          case \"cnot-up\":\n            // Search for trigger\n            for (k = j - 1; k >= 0; k--) {\n              if (this.props.circuit[k][i] === \"trig\") {\n                tmpStateVector = this.evalCNOTGate(k, j, tmpStateVector);\n                break;\n              }\n            }\n            break;\n          case \"cnot-down\":\n            // Search for trigger\n            for (k = j + 1; k < this.props.circuit.length; k++) {\n              if (this.props.circuit[k][i] === \"trig\") {\n                tmpStateVector = this.evalCNOTGate(k, j, tmpStateVector);\n                break;\n              }\n            }\n            break;\n          case \"swap-up\":\n            // Search for other side\n            for (k = j - 1; k >= 0; k--) {\n              if (this.props.circuit[k][i] === \"swap-down\") {\n                tmpStateVector = this.evalSWAPGate(k, j, tmpStateVector);\n                break;\n              }\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    console.log(\"Resulting calculation:\", tmpStateVector);\n    this.setState({\n      stateVector: tmpStateVector,\n    });\n  }\n\n  // Evaluate circuit on first load\n  componentDidMount() {\n    this.evaluateCircuit();\n  }\n\n  // Evaluate circuit only when circuit updates\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.circuit !== this.props.circuit) {\n      this.evaluateCircuit();\n    }\n  }\n\n  render() {\n    // Generate list of qubit names\n    const qubits = [];\n    qubits.push(\n      <strong key={0}>\n        &nbsp;q<sub>0</sub>\n      </strong>\n    );\n    for (var i = 1; i < this.props.circuit.length; i++) {\n      qubits.push(\n        <strong key={i}>\n          q<sub>{i}</sub>\n        </strong>\n      );\n    }\n\n    // Generate statevector\n    const states = [];\n    for (i = 0; i < Math.pow(2, this.props.circuit.length); i++) {\n      states.push(\n        <div key={i}>\n          |\n          {(i >>> 0)\n            .toString(2)\n            .padStart(this.props.circuit.length, \"0\")\n            .split(\"\")\n            .join(\" \") +\n            \"⟩: \" +\n            (this.state.stateVector[i] !== undefined\n              ? math.round(this.state.stateVector[i], 3)\n              : \"???\")}\n        </div>\n      );\n    }\n\n    // Generate probabilities\n    const probabilities = [];\n    const outcomes = []; // List of 100 states distributed by probability of occuring\n    for (i = 0; i < Math.pow(2, this.props.circuit.length); i++) {\n      var probability;\n      if (this.state.stateVector[i] !== undefined) {\n        const re = Math.pow(math.re(this.state.stateVector[i]), 2);\n        const im = Math.pow(math.im(this.state.stateVector[i]), 2);\n        probability = math.round(re + im, 3);\n        // Populate outcome array\n        const probabilityCount = probability * 100;\n        for (var j = 0; j < probabilityCount; j++) {\n          outcomes.push(\n            (i >>> 0).toString(2).padStart(this.props.circuit.length, \"0\")\n          );\n        }\n      } else probability = \"???\";\n      probabilities.push(\n        <div key={i}>\n          |\n          {(i >>> 0)\n            .toString(2)\n            .padStart(this.props.circuit.length, \"0\")\n            .split(\"\")\n            .join(\" \") +\n            \"⟩: \" +\n            (this.state.stateVector[i] !== undefined ? probability : \"???\")}\n        </div>\n      );\n    }\n\n    // Determine random outcome\n    var seed = seedrandom(this.props.options.randomSeed);\n    const output = outcomes[Math.floor(seed() * outcomes.length)];\n\n    const qubitOutput = [];\n    for (i = 0; i < this.props.circuit.length; i++) {\n      qubitOutput.push(\n        <div className=\"output\">\n          <strong key={i}>\n            q<sub>{i}</sub>:\n          </strong>\n          <span>{(output + \"\").charAt(i)}</span>\n          <br />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"measure\">\n        <div className=\"outcome\">\n          <h3>Measurement:</h3>\n          {qubitOutput}\n        </div>\n        <div className={this.props.options.showStatevector ? \"\" : \"hidden\"}>\n          <h3>Statevector:</h3>\n          <div>{qubits}</div>\n          {states}\n        </div>\n        <div className={this.props.options.showStatevector ? \"hidden\" : \"\"}>\n          <h3>Probability:</h3>\n          <div>{qubits}</div>\n          {probabilities}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Measure;\n","import React, { Component } from \"react\";\nimport Toolbar from \"./Toolbar\";\nimport Sidebar from \"./Sidebar\";\nimport GateMenu from \"./GateMenu\";\nimport Circuit from \"./Circuit\";\nimport Measure from \"./Measure\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nconst defaultCircuit = [\n  [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"measure\",\n  ],\n  [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"measure\",\n  ],\n  [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"measure\",\n  ],\n];\n\nconst MAX_QUBITS = 10;\n\n// This is the simulator's main component responsible for housing the other components and maintaining the general state of the system including options and circuit design\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        showGateDrop: false,\n        showGateMatrix: false,\n        showStatevector: false,\n        randomSeed: \"2021\",\n      },\n\n      circuit: JSON.parse(JSON.stringify(defaultCircuit)),\n    };\n  }\n\n  // Handles the release of a gate onto a qubit line\n  onDragEnd(result) {\n    // Dropped onto a valid gate drop location\n    if (\n      result.destination &&\n      result.destination.droppableId.charAt(0) === \"q\"\n    ) {\n      let tmpCircuit = this.state.circuit;\n      const qubit = parseInt(result.destination.droppableId.charAt(1));\n      const col = parseInt(result.destination.droppableId.substring(3));\n\n      tmpCircuit[qubit][col] = result.draggableId;\n\n      // Display trigger option spots above and below CNOT\n      if (result.draggableId === \"cnot\") {\n        for (var i = qubit + 1; i < tmpCircuit.length; i++) {\n          if (tmpCircuit[i][col] !== null) {\n            break;\n          } else {\n            tmpCircuit[i][col] = \"trigopt-cnot\";\n          }\n        }\n        for (i = qubit - 1; i >= 0; i--) {\n          if (tmpCircuit[i][col] !== null) {\n            break;\n          } else {\n            tmpCircuit[i][col] = \"trigopt-cnot\";\n          }\n        }\n      }\n      // Display trigger option spots above and below SWAP\n      if (result.draggableId === \"swap\") {\n        for (i = qubit + 1; i < tmpCircuit.length; i++) {\n          if (tmpCircuit[i][col] !== null) {\n            break;\n          } else {\n            tmpCircuit[i][col] = \"trigopt-swap\";\n          }\n        }\n        for (i = qubit - 1; i >= 0; i--) {\n          if (tmpCircuit[i][col] !== null) {\n            break;\n          } else {\n            tmpCircuit[i][col] = \"trigopt-swap\";\n          }\n        }\n      }\n      this.setState({ circuit: tmpCircuit });\n    }\n  }\n\n  // Callback to handle updating options\n  onSetOption(option, state) {\n    switch (option) {\n      case \"showGateDrop\":\n        this.setState((prevState) => ({\n          options: {\n            ...prevState.options,\n            showGateDrop: state,\n          },\n        }));\n        break;\n      case \"showGateMatrix\":\n        this.setState((prevState) => ({\n          options: {\n            ...prevState.options,\n            showGateMatrix: state,\n          },\n        }));\n        break;\n      case \"showStatevector\":\n        this.setState((prevState) => ({\n          options: {\n            ...prevState.options,\n            showStatevector: state,\n          },\n        }));\n        break;\n      case \"setSeed\":\n        console.log(state.target.value);\n        this.setState((prevState) => ({\n          options: {\n            ...prevState.options,\n            randomSeed: state.target.value,\n          },\n        }));\n        break;\n      default:\n        return;\n    }\n  }\n\n  // Callback when selecting trigger point\n  onSelectTrigger(qubit, index, gate) {\n    let tmpCircuit = this.state.circuit;\n    let gateIndex;\n\n    // Search down for gate\n    for (var i = qubit; i < tmpCircuit.length; i++) {\n      if (\n        tmpCircuit[i][index] !== \"trigopt-\" + gate &&\n        tmpCircuit[i][index] !== gate\n      )\n        break;\n      if (tmpCircuit[i][index] === gate) {\n        gateIndex = i;\n        break;\n      }\n    }\n    if (!gateIndex) {\n      // Search down for gate\n      for (i = qubit; i >= 0; i--) {\n        if (tmpCircuit[i][index] === gate) {\n          gateIndex = i;\n          tmpCircuit[gateIndex][index] = gate + \"-down\";\n          if (gate === \"swap\") {\n            tmpCircuit[qubit][index] = \"swap-up\";\n          }\n          break;\n        } else {\n          tmpCircuit[i][index] = \"connect\";\n        }\n      }\n      while (--i >= 0 && tmpCircuit[i][index] === \"trigopt-\" + gate) {\n        tmpCircuit[i][index] = null;\n      }\n      i = qubit;\n      while (\n        ++i < tmpCircuit.length &&\n        tmpCircuit[i][index] === \"trigopt-\" + gate\n      ) {\n        tmpCircuit[i][index] = null;\n      }\n    } else {\n      // Found gate below\n      tmpCircuit[gateIndex][index] = gate + \"-up\";\n      for (i = qubit; i < gateIndex; i++) {\n        tmpCircuit[i][index] = \"connect\";\n      }\n      if (gate === \"swap\") tmpCircuit[qubit][index] = \"swap-down\";\n\n      // Clear trig opts\n      while (\n        ++i < tmpCircuit.length &&\n        tmpCircuit[i][index] === \"trigopt-\" + gate\n      ) {\n        tmpCircuit[i][index] = null;\n      }\n      i = qubit;\n      while (--i >= 0 && tmpCircuit[i][index] === \"trigopt-\" + gate) {\n        tmpCircuit[i][index] = null;\n      }\n    }\n    if (gate === \"cnot\") tmpCircuit[qubit][index] = \"trig\";\n\n    this.setState({ circuit: tmpCircuit });\n  }\n\n  // Callback for deleting a gate\n  onDeleteGate(qubit, index, gate) {\n    let tmpCircuit = this.state.circuit;\n    tmpCircuit[qubit][index] = null;\n\n    switch (gate) {\n      case \"swap\":\n      case \"cnot\":\n        var i = qubit;\n        while (\n          ++i < tmpCircuit.length &&\n          tmpCircuit[i][index] === \"trigopt-\" + gate\n        ) {\n          tmpCircuit[i][index] = null;\n        }\n        i = qubit;\n        while (--i >= 0 && tmpCircuit[i][index] === \"trigopt-\" + gate) {\n          tmpCircuit[i][index] = null;\n        }\n        break;\n      case \"cnot-up\":\n        i = qubit;\n        while (--i >= 0 && tmpCircuit[i][index] === \"connect\") {\n          tmpCircuit[i][index] = null;\n        }\n        if (tmpCircuit[i][index] === \"trig\") {\n          tmpCircuit[i][index] = null;\n        }\n        break;\n      case \"cnot-down\":\n        i = qubit;\n        while (++i < tmpCircuit.length && tmpCircuit[i][index] === \"connect\") {\n          tmpCircuit[i][index] = null;\n        }\n        if (tmpCircuit[i][index] === \"trig\") {\n          tmpCircuit[i][index] = null;\n        }\n        break;\n      case \"swap-up\":\n        i = qubit;\n        while (\n          --i >= 0 &&\n          (tmpCircuit[i][index] === \"connect\" ||\n            tmpCircuit[i][index] === \"swap-down\")\n        ) {\n          tmpCircuit[i][index] = null;\n        }\n        break;\n      case \"swap-down\":\n        i = qubit;\n        while (\n          ++i < tmpCircuit.length &&\n          (tmpCircuit[i][index] === \"connect\" ||\n            tmpCircuit[i][index] === \"swap-up\")\n        ) {\n          tmpCircuit[i][index] = null;\n        }\n        break;\n      default:\n        break;\n    }\n\n    this.setState({ circuit: tmpCircuit });\n  }\n\n  // Callback for resetting circuit\n  onResetCircuit() {\n    this.setState({\n      circuit: JSON.parse(JSON.stringify(defaultCircuit)),\n    });\n  }\n\n  // Callback for adding qubit line\n  onAddQubit() {\n    var tmpCircuit = this.state.circuit;\n    if (tmpCircuit.length < MAX_QUBITS) {\n      tmpCircuit.push([\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        \"measure\",\n      ]);\n    }\n    this.setState({ circuit: tmpCircuit });\n  }\n\n  // Callback for removing last qubit line\n  onRemoveQubit() {\n    var tmpCircuit = this.state.circuit;\n    if (tmpCircuit.length > 1) {\n      for (var i = 0; i < tmpCircuit[0].length; i++) {\n        if (tmpCircuit[tmpCircuit.length - 1][i] === \"trig\") {\n          for (var j = tmpCircuit.length - 1; j >= 0; j--) {\n            if (tmpCircuit[j][i] === \"cnot-down\") {\n              this.onDeleteGate(j, i, tmpCircuit[j][i]);\n            }\n          }\n        }\n        this.onDeleteGate(\n          tmpCircuit.length - 1,\n          i,\n          tmpCircuit[tmpCircuit.length - 1][i]\n        );\n      }\n      tmpCircuit.pop();\n    }\n    this.setState({ circuit: tmpCircuit });\n  }\n\n  render() {\n    return (\n      <>\n        <Toolbar />\n        <Sidebar\n          options={this.state.options}\n          onSetOption={this.onSetOption.bind(this)}\n        />\n        <div className=\"container\">\n          <DragDropContext onDragEnd={(result) => this.onDragEnd(result)}>\n            <div>\n              <h2>New Program &gt;</h2>\n              <hr />\n              <h3>Gates:</h3>\n              <GateMenu options={this.state.options} />\n              <hr />\n              <h3>Circuit:</h3>\n              <Circuit\n                options={this.state.options}\n                circuit={this.state.circuit}\n                onSelectTrigger={this.onSelectTrigger.bind(this)}\n                onDeleteGate={this.onDeleteGate.bind(this)}\n                onResetCircuit={this.onResetCircuit.bind(this)}\n                onAddQubit={this.onAddQubit.bind(this)}\n                onRemoveQubit={this.onRemoveQubit.bind(this)}\n              />\n              <hr />\n              <Measure\n                circuit={JSON.parse(JSON.stringify(this.state.circuit))}\n                options={this.state.options}\n              />\n            </div>\n          </DragDropContext>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}