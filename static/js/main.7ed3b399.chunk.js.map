{"version":3,"sources":["Toolbar.jsx","Sidebar.jsx","Gate.jsx","GateMenu.jsx","Qubit.jsx","Circuit.jsx","Measure.jsx","App.jsx","index.js"],"names":["Toolbar","style","display","height","className","position","right","top","ticking","format","timezone","Component","Sidebar","onChange","e","props","onSetOption","checked","this","options","showGateDrop","offColor","showGateMatrix","showStatevector","value","randomSeed","href","target","rel","Gate","type","ref","innerRef","icon","faTachometerAlt","onDelete","onDoubleClick","qubit","index","math","onClick","onSelectTrigger","GateMenu","droppableId","uuid","direction","provided","snapshot","droppableProps","draggableId","draggableProps","dragHandleProps","Qubit","number","marginLeft","marginRight","gates","map","gate","onDeleteGate","key","Circuit","circuit","onAddQubit","onRemoveQubit","onResetCircuit","Measure","state","stateVector","a","b","j","N","length","k","Math","pow","l","index0","index1","change","redistribute","tmpStateVector","phaseTransitionT","phaseTransitionS","phaseTransitionZ","swap","m","n","u","min","v","max","x","y","z","console","log","push","i","foundCNOT","evalHGate","evalTGate","evalSGate","evalZGate","evalXGate","evalYGate","evalCNOTGate","setState","evaluateCircuit","prevProps","prevState","qubits","states","toString","padStart","split","join","undefined","probabilities","outcomes","probability","re","im","probabilityCount","seed","seedrandom","output","floor","qubitOutput","charAt","defaultCircuit","App","JSON","parse","stringify","result","destination","tmpCircuit","parseInt","col","substring","alert","option","connecting","isCNOT","pop","bind","onDragEnd","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ed3b399.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\nimport Clock from \"react-live-clock\";\r\n\r\n// Top toolbar\r\nclass Toolbar extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ display: \"fixed\", height: \"50px\" }}>\r\n        <div className=\"toolbar\">\r\n          Spring 2021 IQC Quantum Computer Simulator\r\n          <div style={{ position: \"absolute\", right: \"40px\", top: \"0\" }}>\r\n            <Clock ticking format={\"HH:mm:ss\"} timezone={\"Etc/UTC\"} />\r\n          </div>\r\n          <div style={{ position: \"absolute\", right: \"25px\", top: \"0\" }}>Z</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Toolbar;\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\nimport Switch from \"react-switch\";\r\n\r\n// Sidebar with instructions and options\r\nclass Sidebar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <h1>Instructions:</h1>\r\n        <hr />\r\n        Drag and drop gates on qubit register lines to form a circuit.\r\n        <br />\r\n        <br />\r\n        To connect CNOT trigger lines, click on one of the connection points\r\n        that appear after adding a CNOT gate.\r\n        <br />\r\n        <br />\r\n        To delete a gate, double click on it.\r\n        <h1>Options:</h1>\r\n        <hr />\r\n        <br />\r\n        <span>Display Gate Drop Locations:</span>\r\n        <Switch\r\n          onChange={(e) => this.props.onSetOption(\"showGateDrop\", e)}\r\n          checked={this.props.options.showGateDrop}\r\n          offColor=\"#b02e2e\"\r\n          className=\"react-switch\"\r\n        />\r\n        <br />\r\n        <br />\r\n        <span>Display Gate Matrices:</span>\r\n        <Switch\r\n          onChange={(e) => this.props.onSetOption(\"showGateMatrix\", e)}\r\n          checked={this.props.options.showGateMatrix}\r\n          offColor=\"#b02e2e\"\r\n          className=\"react-switch\"\r\n        />\r\n        <br />\r\n        <br />\r\n        <span>Display Statevector:</span>\r\n        <Switch\r\n          onChange={(e) => this.props.onSetOption(\"showStatevector\", e)}\r\n          checked={this.props.options.showStatevector}\r\n          offColor=\"#b02e2e\"\r\n          className=\"react-switch\"\r\n        />\r\n        <br />\r\n        <br />\r\n        <span>Random seed:</span>\r\n        <input\r\n          className=\"input\"\r\n          value={this.props.options.randomSeed}\r\n          onChange={(e) => this.props.onSetOption(\"setSeed\", e)}\r\n        ></input>\r\n        <h1>Source Code:</h1>\r\n        <hr />\r\n        <br />\r\n        Source code is available on{\" \"}\r\n        <a\r\n          href=\"https://github.com/nrankin18/quantum\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          GitHub\r\n        </a>\r\n        <br />\r\n        <div className=\"copyright\">Copyright © 2021 Nathan Rankin</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\nimport { BlockMath } from \"react-katex\";\r\nimport \"katex/dist/katex.min.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTachometerAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// This is the gate component that is rendered on a qubit line\r\nclass Gate extends Component {\r\n  render() {\r\n    switch (this.props.type) {\r\n      case \"measure\":\r\n        return (\r\n          <div\r\n            className={\"gate measure\"}\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n          >\r\n            <FontAwesomeIcon icon={faTachometerAlt} />\r\n          </div>\r\n        );\r\n      case \"cnot\":\r\n        return (\r\n          <div\r\n            className={\r\n              this.props.onDelete\r\n                ? \"gate cnot noselect deletable\"\r\n                : \"gate cnot noselect\"\r\n            }\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n            onDoubleClick={(e) => {\r\n              if (this.props.onDelete)\r\n                this.props.onDelete(this.props.qubit, this.props.index, true);\r\n            }}\r\n          >\r\n            CNOT\r\n            <span\r\n              className={\r\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\r\n              }\r\n            >\r\n              <BlockMath math=\"\\begin{bmatrix}1&0&0&0\\\\ 0&1&0&0\\\\ 0&0&0&1\\\\ 0&0&1&0\\end{bmatrix}\" />\r\n            </span>\r\n          </div>\r\n        );\r\n      case \"cnotUp\":\r\n        return (\r\n          <div\r\n            className={\r\n              this.props.onDelete\r\n                ? \"gate cnot x noselect deletable\"\r\n                : \"gate cnot x noselect\"\r\n            }\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n            onDoubleClick={(e) => {\r\n              if (this.props.onDelete)\r\n                this.props.onDelete(this.props.qubit, this.props.index, true);\r\n            }}\r\n          >\r\n            X\r\n            <span\r\n              className={\r\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\r\n              }\r\n            >\r\n              <BlockMath math=\"\\begin{bmatrix}0&1\\\\ 1&0\\end{bmatrix}\" />\r\n            </span>\r\n            <span className=\"cnotUp\" />\r\n          </div>\r\n        );\r\n      case \"cnotDown\":\r\n        return (\r\n          <div\r\n            className={\r\n              this.props.onDelete\r\n                ? \"gate cnot x noselect deletable\"\r\n                : \"gate cnot x noselect\"\r\n            }\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n            onDoubleClick={(e) => {\r\n              if (this.props.onDelete)\r\n                this.props.onDelete(this.props.qubit, this.props.index, true);\r\n            }}\r\n          >\r\n            X\r\n            <span\r\n              className={\r\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\r\n              }\r\n            >\r\n              <BlockMath math=\"\\begin{bmatrix}0&1\\\\ 1&0\\end{bmatrix}\" />\r\n            </span>\r\n            <span className=\"cnotDown\" />\r\n          </div>\r\n        );\r\n      case \"h\":\r\n        return (\r\n          <div\r\n            className={\r\n              this.props.onDelete\r\n                ? \"gate h noselect deletable\"\r\n                : \"gate h noselect\"\r\n            }\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n            onDoubleClick={(e) => {\r\n              if (this.props.onDelete)\r\n                this.props.onDelete(this.props.qubit, this.props.index, false);\r\n            }}\r\n          >\r\n            H\r\n            <span\r\n              className={\r\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\r\n              }\r\n            >\r\n              <BlockMath math=\"\\frac1{\\sqrt2}\\begin{bmatrix}1&1\\\\ 1&-1\\end{bmatrix}\" />\r\n            </span>\r\n          </div>\r\n        );\r\n      case \"t\":\r\n        return (\r\n          <div\r\n            className={\r\n              this.props.onDelete\r\n                ? \"gate t noselect deletable\"\r\n                : \"gate t noselect\"\r\n            }\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n            onDoubleClick={(e) => {\r\n              if (this.props.onDelete)\r\n                this.props.onDelete(this.props.qubit, this.props.index, false);\r\n            }}\r\n          >\r\n            T\r\n            <span\r\n              className={\r\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\r\n              }\r\n            >\r\n              <BlockMath math=\"\\begin{bmatrix}1&0\\\\ 0&e^{i\\pi /4}\\end{bmatrix}\" />\r\n            </span>\r\n          </div>\r\n        );\r\n      case \"s\":\r\n        return (\r\n          <div\r\n            className={\r\n              this.props.onDelete\r\n                ? \"gate s noselect deletable\"\r\n                : \"gate s noselect\"\r\n            }\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n            onDoubleClick={(e) => {\r\n              if (this.props.onDelete)\r\n                this.props.onDelete(this.props.qubit, this.props.index, false);\r\n            }}\r\n          >\r\n            S\r\n            <span\r\n              className={\r\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\r\n              }\r\n            >\r\n              <BlockMath math=\"\\begin{bmatrix}1&0\\\\ 0&i\\end{bmatrix}\" />\r\n            </span>\r\n          </div>\r\n        );\r\n      case \"z\":\r\n        return (\r\n          <div\r\n            className={\r\n              this.props.onDelete\r\n                ? \"gate z noselect deletable\"\r\n                : \"gate z noselect\"\r\n            }\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n            onDoubleClick={(e) => {\r\n              if (this.props.onDelete)\r\n                this.props.onDelete(this.props.qubit, this.props.index, false);\r\n            }}\r\n          >\r\n            Z\r\n            <span\r\n              className={\r\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\r\n              }\r\n            >\r\n              <BlockMath math=\"\\begin{bmatrix}1&0\\\\ 0&-1\\end{bmatrix}\" />\r\n            </span>\r\n          </div>\r\n        );\r\n      case \"x\":\r\n        return (\r\n          <div\r\n            className={\r\n              this.props.onDelete\r\n                ? \"gate x noselect deletable\"\r\n                : \"gate x noselect\"\r\n            }\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n            onDoubleClick={(e) => {\r\n              if (this.props.onDelete)\r\n                this.props.onDelete(this.props.qubit, this.props.index, false);\r\n            }}\r\n          >\r\n            X\r\n            <span\r\n              className={\r\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\r\n              }\r\n            >\r\n              <BlockMath math=\"\\begin{bmatrix}0&1\\\\ 1&0\\end{bmatrix}\" />\r\n            </span>\r\n          </div>\r\n        );\r\n      case \"y\":\r\n        return (\r\n          <div\r\n            className={\r\n              this.props.onDelete\r\n                ? \"gate y noselect deletable\"\r\n                : \"gate y noselect\"\r\n            }\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n            onDoubleClick={(e) => {\r\n              if (this.props.onDelete)\r\n                this.props.onDelete(this.props.qubit, this.props.index, false);\r\n            }}\r\n          >\r\n            Y\r\n            <span\r\n              className={\r\n                this.props.options.showGateMatrix ? \"gate-tooltip\" : \"hidden\"\r\n              }\r\n            >\r\n              <BlockMath math=\"\\begin{bmatrix}0&-i\\\\ i&0\\end{bmatrix}\" />\r\n            </span>\r\n          </div>\r\n        );\r\n      case \"trigopt\":\r\n        return (\r\n          <div\r\n            className=\"gate trigopt noselect\"\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n          >\r\n            <div\r\n              onClick={(e) =>\r\n                this.props.onSelectTrigger(this.props.qubit, this.props.index)\r\n              }\r\n            />\r\n          </div>\r\n        );\r\n      case \"trig\":\r\n        return (\r\n          <div\r\n            className=\"gate trig noselect\"\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n          >\r\n            <div />\r\n          </div>\r\n        );\r\n      case \"connect\":\r\n        return (\r\n          <div\r\n            className=\"gate connect noselect\"\r\n            {...this.props}\r\n            ref={this.props.innerRef}\r\n          >\r\n            <div />\r\n          </div>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gate;\r\n","import React, { Component } from \"react\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"./style.css\";\r\nimport Gate from \"./Gate\";\r\n\r\n// This component is the menu to drag new gates from\r\nclass GateMenu extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"gate-menu\">\r\n        <Droppable droppableId={uuid()} key={uuid()} direction=\"horizontal\">\r\n          {(provided, snapshot) => {\r\n            return (\r\n              <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                <span className=\"gate-wrapper\">\r\n                  <Draggable key={1} draggableId={\"h\"} index={0}>\r\n                    {(provided) => {\r\n                      return (\r\n                        <Gate\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          innerRef={provided.innerRef}\r\n                          type=\"h\"\r\n                          options={this.props.options}\r\n                        />\r\n                      );\r\n                    }}\r\n                  </Draggable>\r\n                </span>\r\n                <span className=\"gate-wrapper\">\r\n                  <Draggable key={2} draggableId={\"x\"} index={0}>\r\n                    {(provided) => {\r\n                      return (\r\n                        <Gate\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          innerRef={provided.innerRef}\r\n                          type=\"x\"\r\n                          options={this.props.options}\r\n                        />\r\n                      );\r\n                    }}\r\n                  </Draggable>\r\n                </span>\r\n                <span className=\"gate-wrapper\">\r\n                  <Draggable key={3} draggableId={\"cnot\"} index={0}>\r\n                    {(provided) => {\r\n                      return (\r\n                        <Gate\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          innerRef={provided.innerRef}\r\n                          type=\"cnot\"\r\n                          options={this.props.options}\r\n                        />\r\n                      );\r\n                    }}\r\n                  </Draggable>\r\n                </span>\r\n                <span className=\"gate-wrapper\">\r\n                  <Draggable key={4} draggableId={\"y\"} index={0}>\r\n                    {(provided) => {\r\n                      return (\r\n                        <Gate\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          innerRef={provided.innerRef}\r\n                          type=\"y\"\r\n                          options={this.props.options}\r\n                        />\r\n                      );\r\n                    }}\r\n                  </Draggable>\r\n                </span>\r\n                <span className=\"gate-wrapper\">\r\n                  <Draggable key={5} draggableId={\"z\"} index={0}>\r\n                    {(provided) => {\r\n                      return (\r\n                        <Gate\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          innerRef={provided.innerRef}\r\n                          type=\"z\"\r\n                          options={this.props.options}\r\n                        />\r\n                      );\r\n                    }}\r\n                  </Draggable>\r\n                </span>\r\n                <span className=\"gate-wrapper\">\r\n                  <Draggable key={6} draggableId={\"t\"} index={0}>\r\n                    {(provided) => {\r\n                      return (\r\n                        <Gate\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          innerRef={provided.innerRef}\r\n                          type=\"t\"\r\n                          options={this.props.options}\r\n                        />\r\n                      );\r\n                    }}\r\n                  </Draggable>\r\n                </span>\r\n                <span className=\"gate-wrapper\">\r\n                  <Draggable key={7} draggableId={\"s\"} index={0}>\r\n                    {(provided) => {\r\n                      return (\r\n                        <Gate\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          innerRef={provided.innerRef}\r\n                          type=\"s\"\r\n                          options={this.props.options}\r\n                        />\r\n                      );\r\n                    }}\r\n                  </Draggable>\r\n                </span>\r\n              </div>\r\n            );\r\n          }}\r\n        </Droppable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GateMenu;\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport Gate from \"./Gate\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\n// This component is an individual qubit register\r\nclass Qubit extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"qubit\">\r\n        <span className=\"qubit-line\"></span>\r\n        <span>\r\n          <strong>\r\n            q<sub>{this.props.number}</sub>\r\n          </strong>\r\n        </span>\r\n        <span style={{ marginLeft: \"10px\", marginRight: \"20px\" }}>|0⟩</span>\r\n        {this.props.gates.map((gate, index) => {\r\n          if (\r\n            gate === \"h\" ||\r\n            gate === \"cnot\" ||\r\n            gate === \"cnotUp\" ||\r\n            gate === \"cnotDown\" ||\r\n            gate === \"t\" ||\r\n            gate === \"s\" ||\r\n            gate === \"z\" ||\r\n            gate === \"x\" ||\r\n            gate === \"y\" ||\r\n            gate === \"trig\" ||\r\n            gate === \"connect\"\r\n          ) {\r\n            return (\r\n              <span className=\"gate-wrapper\" key={uuid()}>\r\n                <Gate\r\n                  type={gate}\r\n                  qubit={this.props.number}\r\n                  index={index}\r\n                  options={this.props.options}\r\n                  onDelete={this.props.onDeleteGate}\r\n                />\r\n              </span>\r\n            );\r\n          } else if (gate === \"measure\") {\r\n            return (\r\n              <span className=\"gate-wrapper\" key={uuid()}>\r\n                <Gate\r\n                  type=\"measure\"\r\n                  qubit={this.props.number}\r\n                  index={index}\r\n                  options={this.props.options}\r\n                />\r\n              </span>\r\n            );\r\n          } else if (gate === \"trigopt\") {\r\n            return (\r\n              <span className=\"gate-wrapper\" key={uuid()}>\r\n                <Gate\r\n                  type=\"trigopt\"\r\n                  qubit={this.props.number}\r\n                  index={index}\r\n                  options={this.props.options}\r\n                  onSelectTrigger={this.props.onSelectTrigger}\r\n                />\r\n              </span>\r\n            );\r\n          } else {\r\n            return (\r\n              <span className=\"gate-wrapper\" key={uuid()}>\r\n                <Droppable\r\n                  droppableId={\"q\" + this.props.number + \",\" + index}\r\n                  direction=\"horizontal\"\r\n                >\r\n                  {(provided) => {\r\n                    return (\r\n                      <span\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        key={uuid()}\r\n                        className={\r\n                          this.props.options.showGateDrop\r\n                            ? \"gate-drop show\"\r\n                            : \"gate-drop\"\r\n                        }\r\n                      />\r\n                    );\r\n                  }}\r\n                </Droppable>\r\n              </span>\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Qubit;\r\n","import React, { Component } from \"react\";\r\nimport Qubit from \"./Qubit\";\r\nimport \"./style.css\";\r\n\r\n// This componenet manages the variable qubit lines\r\nclass Circuit extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"circuit-wrapper\">\r\n          <div className=\"circuit\">\r\n            {this.props.circuit.map((qubit, index) => (\r\n              <Qubit\r\n                number={index}\r\n                options={this.props.options}\r\n                key={index}\r\n                gates={qubit}\r\n                onSelectTrigger={this.props.onSelectTrigger}\r\n                onDeleteGate={this.props.onDeleteGate}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <button className=\"button\" onClick={() => this.props.onAddQubit()}>\r\n          Add qubit\r\n        </button>\r\n        <button className=\"button\" onClick={() => this.props.onRemoveQubit()}>\r\n          Remove qubit\r\n        </button>\r\n        <button className=\"button\" onClick={() => this.props.onResetCircuit()}>\r\n          Reset circuit\r\n        </button>{\" \"}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Circuit;\r\n","import React, { Component } from \"react\";\r\nimport * as math from \"mathjs\";\r\nimport \"./style.css\";\r\nimport seedrandom from \"seedrandom\";\r\n\r\n// This component calculates and displays the output of the circuit\r\nclass Measure extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stateVector: [],\r\n    };\r\n  }\r\n\r\n  // a = 1/sqrt(2)*(a+b)\r\n  // b = 1/sqrt(2)*(a-b)\r\n  redistribute(a, b) {\r\n    return {\r\n      a: math.evaluate(\"1/sqrt(2)*((\" + a + \")+(\" + b + \"))\"),\r\n      b: math.evaluate(\"1/sqrt(2)*((\" + a + \")-(\" + b + \"))\"),\r\n    };\r\n  }\r\n\r\n  // a = e^(i pi/4)*a\r\n  phaseTransitionT(a) {\r\n    return math.evaluate(\"e^((i*pi)/4)*(\" + a + \")\");\r\n  }\r\n\r\n  // a = i*a\r\n  phaseTransitionS(a) {\r\n    return math.evaluate(\"i*(\" + a + \")\");\r\n  }\r\n\r\n  // a = -1*a\r\n  phaseTransitionZ(a) {\r\n    return math.evaluate(\"-1*(\" + a + \")\");\r\n  }\r\n\r\n  // Swaps a and b\r\n  swap(a, b) {\r\n    return { a: b, b: a };\r\n  }\r\n\r\n  // Function called when H gate encountered\r\n  evalHGate(j, stateVector) {\r\n    const N = this.props.circuit.length;\r\n    for (var k = 0; k < Math.pow(2, j); k++) {\r\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\r\n        const index0 = l + k * Math.pow(2, N - j);\r\n        const index1 = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\r\n        const change = this.redistribute(\r\n          stateVector[index0],\r\n          stateVector[index1]\r\n        );\r\n        stateVector[index0] = change.a;\r\n        stateVector[index1] = change.b;\r\n      }\r\n    }\r\n    return stateVector;\r\n  }\r\n\r\n  // Function called when T gate encountered\r\n  evalTGate(j, tmpStateVector) {\r\n    const N = this.props.circuit.length;\r\n    for (var k = 0; k < Math.pow(2, j); k++) {\r\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\r\n        const index = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\r\n        const change = this.phaseTransitionT(tmpStateVector[index]);\r\n        tmpStateVector[index] = change;\r\n      }\r\n    }\r\n    return tmpStateVector;\r\n  }\r\n\r\n  // Function called when S gate encountered\r\n  evalSGate(j, tmpStateVector) {\r\n    const N = this.props.circuit.length;\r\n    for (var k = 0; k < Math.pow(2, j); k++) {\r\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\r\n        const index = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\r\n        const change = this.phaseTransitionS(tmpStateVector[index]);\r\n        tmpStateVector[index] = change;\r\n      }\r\n    }\r\n    return tmpStateVector;\r\n  }\r\n\r\n  // Function called when Z gate encountered\r\n  evalZGate(j, tmpStateVector) {\r\n    const N = this.props.circuit.length;\r\n    for (var k = 0; k < Math.pow(2, j); k++) {\r\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\r\n        const index = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\r\n        const change = this.phaseTransitionZ(tmpStateVector[index]);\r\n        tmpStateVector[index] = change;\r\n      }\r\n    }\r\n    return tmpStateVector;\r\n  }\r\n\r\n  // Function called when X gate encountered\r\n  evalXGate(j, tmpStateVector) {\r\n    const N = this.props.circuit.length;\r\n    for (var k = 0; k < Math.pow(2, j); k++) {\r\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\r\n        const index0 = l + k * Math.pow(2, N - j);\r\n        const index1 = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\r\n        const change = this.swap(\r\n          tmpStateVector[index0],\r\n          tmpStateVector[index1]\r\n        );\r\n        tmpStateVector[index0] = math.evaluate(\"i*(\" + change.a + \")\");\r\n        tmpStateVector[index1] = math.evaluate(\"-i*(\" + change.b + \")\");\r\n      }\r\n    }\r\n    return tmpStateVector;\r\n  }\r\n\r\n  // Function called when Y gate encountered\r\n  evalYGate(j, tmpStateVector) {\r\n    const N = this.props.circuit.length;\r\n    for (var k = 0; k < Math.pow(2, j); k++) {\r\n      for (var l = 0; l < Math.pow(2, N - j - 1); l++) {\r\n        const index0 = l + k * Math.pow(2, N - j);\r\n        const index1 = l + k * Math.pow(2, N - j) + Math.pow(2, N - j - 1);\r\n        const change = this.swap(\r\n          tmpStateVector[index0],\r\n          tmpStateVector[index1]\r\n        );\r\n        tmpStateVector[index0] = change.a;\r\n        tmpStateVector[index1] = change.b;\r\n      }\r\n    }\r\n    return tmpStateVector;\r\n  }\r\n\r\n  // Function called when CNOT gate or trigger encountered\r\n  // m = trigger, n = NOT\r\n  evalCNOTGate(m, n, tmpStateVector) {\r\n    const N = this.props.circuit.length;\r\n    const u = Math.min(m, n);\r\n    const v = Math.max(m, n);\r\n    for (var x = 0; x < Math.pow(2, u); x++) {\r\n      for (var y = 0; y < Math.pow(2, v - u - 1); y++) {\r\n        for (var z = 0; z < Math.pow(2, N - v - 1); z++) {\r\n          const index0 =\r\n            x * Math.pow(2, N - u) +\r\n            y * Math.pow(2, N - v) +\r\n            z +\r\n            Math.pow(2, N - m - 1);\r\n          const index1 =\r\n            x * Math.pow(2, N - u) +\r\n            y * Math.pow(2, N - v) +\r\n            z +\r\n            Math.pow(2, N - m - 1) +\r\n            Math.pow(2, N - n - 1);\r\n          const change = this.swap(\r\n            tmpStateVector[index0],\r\n            tmpStateVector[index1]\r\n          );\r\n          tmpStateVector[index0] = change.a;\r\n          tmpStateVector[index1] = change.b;\r\n        }\r\n      }\r\n    }\r\n    return tmpStateVector;\r\n  }\r\n\r\n  // Called when circuit is updated to calculate new output (ignores unconnected CNOT gates)\r\n  evaluateCircuit() {\r\n    console.log(\"Calculating result of following circuit:\", this.props.circuit);\r\n\r\n    // Initialize state vector\r\n    const N = this.props.circuit.length;\r\n    var tmpStateVector = [];\r\n    tmpStateVector.push(1);\r\n    for (var i = 1; i < Math.pow(2, N); i++) {\r\n      tmpStateVector.push(0);\r\n    }\r\n\r\n    // Column-major traversal\r\n    // i = gate number, j = qubit number\r\n    for (i = 0; i < this.props.circuit[0].length; i++) {\r\n      let foundCNOT = false; // Marks if CNOT has already been evaluated (looks for both trigger and CNOT)\r\n      var k;\r\n      for (var j = 0; j < this.props.circuit.length; j++) {\r\n        switch (this.props.circuit[j][i]) {\r\n          case \"h\":\r\n            tmpStateVector = this.evalHGate(j, tmpStateVector);\r\n            break;\r\n          case \"t\":\r\n            tmpStateVector = this.evalTGate(j, tmpStateVector);\r\n            break;\r\n          case \"s\":\r\n            tmpStateVector = this.evalSGate(j, tmpStateVector);\r\n            break;\r\n          case \"z\":\r\n            tmpStateVector = this.evalZGate(j, tmpStateVector);\r\n            break;\r\n          case \"x\":\r\n            tmpStateVector = this.evalXGate(j, tmpStateVector);\r\n            break;\r\n          case \"y\":\r\n            tmpStateVector = this.evalYGate(j, tmpStateVector);\r\n            break;\r\n          case \"trig\":\r\n            if (foundCNOT) break;\r\n            foundCNOT = true;\r\n            // Search for NOT connection\r\n            for (k = j + 1; k < this.props.circuit.length; k++) {\r\n              if (\r\n                this.props.circuit[k][i] === \"cnotUp\" ||\r\n                this.props.circuit[k][i] === \"cnotDown\"\r\n              ) {\r\n                tmpStateVector = this.evalCNOTGate(j, k, tmpStateVector);\r\n                break;\r\n              }\r\n            }\r\n            break;\r\n          case \"cnotDown\":\r\n          case \"cnotUp\":\r\n            if (foundCNOT) break;\r\n            foundCNOT = true;\r\n            // Search for trigger\r\n            for (k = j + 1; k < this.props.circuit.length; k++) {\r\n              if (this.props.circuit[k][i] === \"trig\") {\r\n                tmpStateVector = this.evalCNOTGate(k, j, tmpStateVector);\r\n                break;\r\n              }\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    console.log(\"Resulting calculation:\", tmpStateVector);\r\n    this.setState({\r\n      stateVector: tmpStateVector,\r\n    });\r\n  }\r\n\r\n  // Evaluate circuit on first load\r\n  componentDidMount() {\r\n    this.evaluateCircuit();\r\n  }\r\n\r\n  // Evaluate circuit only when circuit updates\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.circuit !== this.props.circuit) {\r\n      this.evaluateCircuit();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // Generate list of qubit names\r\n    const qubits = [];\r\n    qubits.push(\r\n      <strong key={0}>\r\n        &nbsp;q<sub>0</sub>\r\n      </strong>\r\n    );\r\n    for (var i = 1; i < this.props.circuit.length; i++) {\r\n      qubits.push(\r\n        <strong key={i}>\r\n          q<sub>{i}</sub>\r\n        </strong>\r\n      );\r\n    }\r\n\r\n    // Generate statevector\r\n    const states = [];\r\n    for (i = 0; i < Math.pow(2, this.props.circuit.length); i++) {\r\n      states.push(\r\n        <div key={i}>\r\n          |\r\n          {(i >>> 0)\r\n            .toString(2)\r\n            .padStart(this.props.circuit.length, \"0\")\r\n            .split(\"\")\r\n            .join(\" \") +\r\n            \"⟩: \" +\r\n            (this.state.stateVector[i] !== undefined\r\n              ? math.round(this.state.stateVector[i], 3)\r\n              : \"???\")}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Generate probabilities\r\n    const probabilities = [];\r\n    const outcomes = []; // List of 100 states distributed by probability of occuring\r\n    for (i = 0; i < Math.pow(2, this.props.circuit.length); i++) {\r\n      var probability;\r\n      if (this.state.stateVector[i] !== undefined) {\r\n        const re = Math.pow(math.re(this.state.stateVector[i]), 2);\r\n        const im = Math.pow(math.im(this.state.stateVector[i]), 2);\r\n        probability = math.round(re + im, 3);\r\n        // Populate outcome array\r\n        const probabilityCount = probability * 100;\r\n        for (var j = 0; j < probabilityCount; j++) {\r\n          outcomes.push(\r\n            (i >>> 0).toString(2).padStart(this.props.circuit.length, \"0\")\r\n          );\r\n        }\r\n      } else probability = \"???\";\r\n      probabilities.push(\r\n        <div key={i}>\r\n          |\r\n          {(i >>> 0)\r\n            .toString(2)\r\n            .padStart(this.props.circuit.length, \"0\")\r\n            .split(\"\")\r\n            .join(\" \") +\r\n            \"⟩: \" +\r\n            (this.state.stateVector[i] !== undefined ? probability : \"???\")}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Determine random outcome\r\n    var seed = seedrandom(this.props.options.randomSeed);\r\n    const output = outcomes[Math.floor(seed() * outcomes.length)];\r\n\r\n    const qubitOutput = [];\r\n    for (i = 0; i < this.props.circuit.length; i++) {\r\n      qubitOutput.push(\r\n        <div className=\"output\">\r\n          <strong key={i}>\r\n            q<sub>{i}</sub>:\r\n          </strong>\r\n          <span>{(output + \"\").charAt(i)}</span>\r\n          <br />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"measure\">\r\n        <div className=\"outcome\">\r\n          <h3>Measurement:</h3>\r\n          {qubitOutput}\r\n        </div>\r\n        <div className={this.props.options.showStatevector ? \"\" : \"hidden\"}>\r\n          <h3>Statevector:</h3>\r\n          <div>{qubits}</div>\r\n          {states}\r\n        </div>\r\n        <div className={this.props.options.showStatevector ? \"hidden\" : \"\"}>\r\n          <h3>Probability:</h3>\r\n          <div>{qubits}</div>\r\n          {probabilities}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Measure;\r\n","import React, { Component } from \"react\";\nimport Toolbar from \"./Toolbar\";\nimport Sidebar from \"./Sidebar\";\nimport GateMenu from \"./GateMenu\";\nimport Circuit from \"./Circuit\";\nimport Measure from \"./Measure\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nconst defaultCircuit = [\n  [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"measure\",\n  ],\n  [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"measure\",\n  ],\n  [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"measure\",\n  ],\n];\n\nconst MAX_QUBITS = 10;\n\n// This is the simulator's main component responsible for housing the other components and maintaining the general state of the system including options and circuit design\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        showGateDrop: false,\n        showGateMatrix: false,\n        showStatevector: false,\n        randomSeed: \"2021\",\n      },\n\n      circuit: JSON.parse(JSON.stringify(defaultCircuit)),\n    };\n  }\n\n  // Handles the release of a gate onto a qubit line\n  onDragEnd(result) {\n    // Dropped onto a valid gate drop location\n    if (\n      result.destination &&\n      result.destination.droppableId.charAt(0) === \"q\"\n    ) {\n      let tmpCircuit = this.state.circuit;\n      const qubit = parseInt(result.destination.droppableId.charAt(1));\n      const col = parseInt(result.destination.droppableId.substring(3));\n\n      // Ensure only one CNOT per column\n      if (result.draggableId === \"cnot\") {\n        for (var i = 0; i < tmpCircuit.length; i++) {\n          if (\n            i !== qubit &&\n            (tmpCircuit[i][col] === \"cnot\" ||\n              tmpCircuit[i][col] === \"cnotUp\" ||\n              tmpCircuit[i][col] === \"cnotDown\")\n          ) {\n            alert(\"Error: Only one CNOT allowed per column\");\n            return;\n          }\n        }\n      }\n      tmpCircuit[qubit][col] = result.draggableId;\n\n      // Display trigger option spots above and below CNOT\n      if (result.draggableId === \"cnot\") {\n        for (i = qubit + 1; i < tmpCircuit.length; i++) {\n          if (tmpCircuit[i][col] !== null) {\n            break;\n          } else {\n            tmpCircuit[i][col] = \"trigopt\";\n          }\n        }\n        for (i = qubit - 1; i >= 0; i--) {\n          if (tmpCircuit[i][col] !== null) {\n            break;\n          } else {\n            tmpCircuit[i][col] = \"trigopt\";\n          }\n        }\n      }\n      this.setState({ circuit: tmpCircuit });\n    }\n  }\n\n  // Callback to handle updating options\n  onSetOption(option, state) {\n    switch (option) {\n      case \"showGateDrop\":\n        this.setState((prevState) => ({\n          options: {\n            ...prevState.options,\n            showGateDrop: state,\n          },\n        }));\n        break;\n      case \"showGateMatrix\":\n        this.setState((prevState) => ({\n          options: {\n            ...prevState.options,\n            showGateMatrix: state,\n          },\n        }));\n        break;\n      case \"showStatevector\":\n        this.setState((prevState) => ({\n          options: {\n            ...prevState.options,\n            showStatevector: state,\n          },\n        }));\n        break;\n      case \"setSeed\":\n        console.log(state.target.value);\n        this.setState((prevState) => ({\n          options: {\n            ...prevState.options,\n            randomSeed: state.target.value,\n          },\n        }));\n        break;\n      default:\n        return;\n    }\n  }\n\n  // Callback when selecting trigger point\n  onSelectTrigger(qubit, index) {\n    let tmpCircuit = this.state.circuit;\n    let connecting = false;\n    // Set spaces between CNOT and trigger to connecting rod\n    for (var i = 0; i < tmpCircuit.length; i++) {\n      if (i === qubit) {\n        connecting = !connecting;\n      }\n      if (tmpCircuit[i][index] === \"cnot\") {\n        tmpCircuit[i][index] = connecting ? \"cnotUp\" : \"cnotDown\";\n        connecting = !connecting;\n        continue;\n      } else if (tmpCircuit[i][index] === \"trigopt\") {\n        tmpCircuit[i][index] = connecting ? \"connect\" : null;\n      }\n    }\n    tmpCircuit[qubit][index] = \"trig\";\n    this.setState({ circuit: tmpCircuit });\n  }\n\n  // Callback for deleting a gate\n  onDeleteGate(qubit, index, isCNOT) {\n    let tmpCircuit = this.state.circuit;\n    tmpCircuit[qubit][index] = null;\n    // Remove triggers, connections, and trigger option points if CNOT deleted\n    if (isCNOT) {\n      for (var i = 0; i < tmpCircuit.length; i++) {\n        if (\n          tmpCircuit[i][index] === \"trig\" ||\n          tmpCircuit[i][index] === \"connect\" ||\n          tmpCircuit[i][index] === \"trigopt\"\n        )\n          tmpCircuit[i][index] = null;\n      }\n    }\n    this.setState({ circuit: tmpCircuit });\n  }\n\n  // Callback for resetting circuit\n  onResetCircuit() {\n    this.setState({\n      circuit: JSON.parse(JSON.stringify(defaultCircuit)),\n    });\n  }\n\n  // Callback for adding qubit line\n  onAddQubit() {\n    var tmpCircuit = this.state.circuit;\n    if (tmpCircuit.length < MAX_QUBITS) {\n      tmpCircuit.push([\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        \"measure\",\n      ]);\n    }\n    this.setState({ circuit: tmpCircuit });\n  }\n\n  // Callback for removing last qubit line\n  onRemoveQubit() {\n    var tmpCircuit = this.state.circuit;\n    if (tmpCircuit.length > 1) {\n      tmpCircuit.pop();\n    }\n    this.setState({ circuit: tmpCircuit });\n  }\n\n  render() {\n    return (\n      <>\n        <Toolbar />\n        <Sidebar\n          options={this.state.options}\n          onSetOption={this.onSetOption.bind(this)}\n        />\n        <div className=\"container\">\n          <DragDropContext onDragEnd={(result) => this.onDragEnd(result)}>\n            <div>\n              <h2>New Program &gt;</h2>\n              <hr />\n              <h3>Gates:</h3>\n              <GateMenu options={this.state.options} />\n              <hr />\n              <h3>Circuit:</h3>\n              <Circuit\n                options={this.state.options}\n                circuit={this.state.circuit}\n                onSelectTrigger={this.onSelectTrigger.bind(this)}\n                onDeleteGate={this.onDeleteGate.bind(this)}\n                onResetCircuit={this.onResetCircuit.bind(this)}\n                onAddQubit={this.onAddQubit.bind(this)}\n                onRemoveQubit={this.onRemoveQubit.bind(this)}\n              />\n              <hr />\n              <Measure\n                circuit={JSON.parse(JSON.stringify(this.state.circuit))}\n                options={this.state.options}\n              />\n            </div>\n          </DragDropContext>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}